package br.com.compasso.uol.productsms;

import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.delete;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;

import java.math.BigDecimal;
import java.net.URI;

import javax.validation.Valid;

import org.junit.Before;
import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Order;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.runner.RunWith;
import org.junit.runners.MethodSorters;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.http.HttpHeaders;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;
import org.springframework.test.web.servlet.result.MockMvcResultMatchers;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;
import org.springframework.web.util.UriComponentsBuilder;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.jayway.jsonpath.JsonPath;

import br.com.compasso.uol.products.ProductsMsApplication;
import br.com.compasso.uol.products.controller.ProdutoController;
import br.com.compasso.uol.products.dto.ProdutoRequestDTO;
import br.com.compasso.uol.products.dto.ProdutoResponseDTO;
import br.com.compasso.uol.products.entity.Produto;

@RunWith(SpringJUnit4ClassRunner.class)
@SpringBootTest(classes = ProductsMsApplication.class)
@AutoConfigureMockMvc
public class ProductsControllerTest {

	@Autowired
	private MockMvc mockMvc;

	@Autowired
	private ObjectMapper objectMapper;

	@Test
	@DisplayName("Testando o ProdutoController.findById com id existente.")
	public void findById() throws Exception {
		mockMvc.perform(get("/products/{id}", 2).accept(MediaType.APPLICATION_JSON)).andExpect(status().isOk())
				.andReturn();
	}

	@Test
	@DisplayName("Testando o ProdutoController.findById com id inexistente.")
	public void findByIdInexistente() throws Exception {
		mockMvc.perform(get("/products/{id}", 200).accept(MediaType.APPLICATION_JSON)).andExpect(status().isNotFound())
				.andReturn();
	}

	@Test
	@DisplayName("Testando o ProdutoController.findAll")
	public void findByAll() throws Exception {
		mockMvc.perform(get("/produtos").accept(MediaType.APPLICATION_JSON)).andExpect(status().isOk()).andReturn();
	}

	@Test
	@DisplayName("Testando o ProdutoController.findSearch")
	public void findSearch() throws Exception {
		mockMvc.perform(get("/products/search").accept(MediaType.APPLICATION_JSON).param("minPrice", "12.65")
				.param("maxPrice", "30.00").param("q", "Bolacha")).andExpect(status().isOk()).andReturn();
	}

	@Test
	@DisplayName("Testando o ProdutoController.findSearch vazio")
	public void findSearchVazio() throws Exception {
		mockMvc.perform(get("/products/search").accept(MediaType.APPLICATION_JSON)).andExpect(status().isOk())
				.andReturn();
	}

	@Test
	@DisplayName("Testando o ProdutoController.delete com id existente.")
	public void deleteIdExistente() throws Exception {
		mockMvc.perform(delete("/products/{id}", 1).accept(MediaType.APPLICATION_JSON)).andExpect(status().isOk())
				.andReturn();
	}

	@Test
	@DisplayName("Testando o ProdutoController.delete com id inexistente.")
	public void deleteIdInexistente() throws Exception {
		mockMvc.perform(delete("/products/{id}", 100).accept(MediaType.APPLICATION_JSON))
				.andExpect(status().isNotFound()).andReturn();
	}

	@Test
	@DisplayName("Testando o ProdutoController.post")
	public void postProduto() throws Exception {
		ProdutoRequestDTO produtoRequestDTO = new ProdutoRequestDTO("Azeite", "Azeite", new BigDecimal(15.90));
		mockMvc.perform(MockMvcRequestBuilders.post("/products")
				.content(objectMapper.writeValueAsString(produtoRequestDTO)).contentType(MediaType.APPLICATION_JSON))
				.andExpect(MockMvcResultMatchers.status().isCreated());

	}
	
	@Test
	@DisplayName("Testando o ProdutoController.pu")
	public void putProduto() throws Exception {
		ProdutoRequestDTO produtoRequestDTO = new ProdutoRequestDTO("Azeite", "Azeite", new BigDecimal(15.90));
		mockMvc.perform(MockMvcRequestBuilders.post("/products")
				.content(objectMapper.writeValueAsString(produtoRequestDTO)).contentType(MediaType.APPLICATION_JSON))
				.andExpect(MockMvcResultMatchers.status().isCreated());

	}



}
